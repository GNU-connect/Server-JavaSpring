plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

// 환경 변수에서 ENVIRONMENT 값 가져오기
def environment = System.getenv("ENVIRONMENT")

// ENVIRONMENT 값이 production인 경우에만 Sentry 빌드
if (environment == "production") {
	sentry {
		includeSourceContext = true
		org = "connect-gnu"
		projectName = "java-spring-boot"
		authToken = System.getenv("SENTRY_AUTH_TOKEN")
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.9.0'
	implementation 'javax.enterprise:cdi-api:2.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'javax:javaee-api:8.0.1'
}

tasks.named('test') {
	useJUnitPlatform()
	ignoreFailures = true
}